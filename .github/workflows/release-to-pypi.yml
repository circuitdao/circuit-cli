name: Release to PyPI on GitHub Release

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  build-and-publish:
    name: Build and publish to PyPI
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: '1.8.3'

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create false

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Install project dependencies (no dev)
        run: |
          poetry install --no-interaction --no-root --only main

      - name: Ensure version matches tag
        run: |
          TAG_VERSION="${GITHUB_REF_NAME#v}"
          echo "Git tag: $GITHUB_REF_NAME -> version: $TAG_VERSION"
          PYPROJECT_VERSION=$(python -c "import tomllib,sys;print(tomllib.load(open('pyproject.toml','rb'))['tool']['poetry']['version'])")
          echo "pyproject version: $PYPROJECT_VERSION"
          if [ "$PYPROJECT_VERSION" != "$TAG_VERSION" ]; then
            echo "Error: pyproject.toml version ($PYPROJECT_VERSION) does not match tag ($TAG_VERSION)." >&2
            exit 1
          fi
      - name: Build package (sdist and wheel)
        run: |
          poetry build

      - name: Publish to PyPI
        env:
          POETRY_HTTP_BASIC_PYPI_USERNAME: __token__
          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          poetry publish --no-interaction --username "$POETRY_HTTP_BASIC_PYPI_USERNAME" --password "$POETRY_HTTP_BASIC_PYPI_PASSWORD" --skip-existing

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*
